/*        Hierarchy Builder: algebraic hierarchies made easy
    This software is released under the terms of the MIT license              */

% This file implements a simple form of "type inference" for arguments which
% are mixins and can be inferred looking at the \lambda Prolog context, in
% particular [mixins-src] context entries (the one of Coq looks at CS databases
% and such, which cannot be easily manipulated on the fly).
%
% If provides function to infer this kind of arguments and to declare a context
% made of mixins to be used for such inference. The idea is that one has
% a bunch of mixins at hand and does want to pass them down to other terms,
% without explictly saying exactly where they should be used.

namespace synthesis {

% [infer-mixin-args Params TheType ML Bo Out]
% Out is morally (fun rest => Bo Params TheType ...) where all arguments in ...
% which are mixins in ML were inferrend (the other argumets are abstracted back
% as rest).
pred infer-mixin-args i:list term, i:term, i:list mixinname, i:term, o:term.
infer-mixin-args Ps T ML F SFX :- std.do! [
  std.assert-ok! (coq.typecheck F Ty) "infer-mixin-args: F illtyped",
  coq.mk-eta (-1) Ty F EtaF,
  coq.subst-fun {std.append Ps [T]} EtaF FT,
  std.fold ML FT (private.instantiate-mixin T) SFX
].

% [infer-all-mixin-args Params TheType GR X] fills in all the arguments of GR
% which are misxins (as per infer-mixin-args)
pred infer-all-mixin-args i:list term, i:term, i:gref, o:term.
infer-all-mixin-args Ps T GR X :- !, std.do! [
  std.assert! (gref-deps GR MLwP) "BUG: gref-deps should never fail",
  list-w-params_list MLwP ML,
  infer-mixin-args Ps T ML (global GR) X,
].

% [assert!-infer-mixin TheType M Out] infers one mixin M on TheType and
% aborts with an error message if the mixin cannot be inferred
pred assert!-infer-mixin i:term, i:mixinname, o:term.
assert!-infer-mixin T M B :-
  if (private.mixin-for T M B)
     true
     (coq.error "HB: cannot inhabit mixin"
       {nice-gref->string M} "on"{coq.term->string T}).

% Given TheType it looks all canonical structure instances on it and makes
% all their mixins available for inference
pred under-local-canonical-mixins-of.do! i:term, i:list prop.
under-local-canonical-mixins-of.do! T P :- std.do! [
  get-local-structures T CS,
  std.map CS (private.structure-instance->mixin-srcs T) MSLL,
  std.flatten MSLL MSL,
  MSL => std.do! P,
].

% Given TheType and a factory instance (on it), makes all the mixins provided by
% the factory available for inference.
pred under-mixin-src-from-factory.do! i:term, i:term, i:list prop.
under-mixin-src-from-factory.do! TheType TheFactory LP :- std.do! [
  private.factory-instance->new-mixins [] TheFactory ML,
  std.map ML (m\c\ c = mixin-src TheType m TheFactory) MLClauses,
  MLClauses => std.do! LP,
].

% Given TheType and a factory instance (on it), builds all the *new* mixins
% provided by the factory available for and passes them to the given
% continuation
pred under-new-mixin-src-from-factory.do! i:term, i:term, i:(list mixinname -> prop).
under-new-mixin-src-from-factory.do! TheType TheFactory LP :- std.do! [
  findall-mixin-src TheType OldMixins,
  private.factory-instance->new-mixins OldMixins TheFactory NewML,
  std.map NewML (m\c\ c = mixin-src TheType m TheFactory) NewMLClauses,
  NewMLClauses => std.do! [ LP NewML ],
].

% [under-mixins.then MLwP Pred F] states that F has shape
%   fun p_1 .. p_k T,
%      (m_0 : M_0 ..p.. T) .. (m_n : M_n ..p.. T m_i0 .. m_ik) =>
%      Body m_0 .. m_n
% where  MLwP contains M_0, .., M_n (under p_1 .. p_k)
%   and  Body is such that [..,mixin-src T M_i m_i,..] => Pred Body
%   and  ..p.. is a list of terms built using p_1 .. p_k and T
pred under-mixins.then i:list (w-args mixinname),
    i:(name -> term -> (term -> A) -> A -> prop),
    i:(A -> prop), o:A.
under-mixins.then [] _ Pred Body :- !, Pred Body.
under-mixins.then [triple M Args T|ML] MkFun Pred Out :- std.do! [
  infer-all-mixin-args Args T M MTy,
  (@pi-decl `m` MTy m\ mixin-src T M m =>
    under-mixins.then ML MkFun Pred (Body m)),
  MkFun `m` MTy Body Out,
].

% [mixins-w-params.fun MLwP Pred F] states that F has shape
%   fun p_1 .. p_k T,
%      (m_0 : M_0 ..p.. T) .. (m_n : M_n ..p.. T m_i0 .. m_ik) =>
%      Body m_0 .. m_n
% where  MLwP contains M_0, .., M_n (under p_1 .. p_k)
%   and  Body is such that [..,mixin-src T M_i m_i,..] => Pred Body
%   and  ..p.. is a list of terms built using p_1 .. p_k and T
pred mixins-w-params.fun i:list-w-params mixinname, i:(list term -> term -> term -> prop), o:term.
mixins-w-params.fun L P Out :- !,
  w-params.then L mk-fun mk-fun (p\ t\ ml\ under-mixins.then ml mk-fun (P p t)) Out.

/* ------------------------------------------------------------------------- */
/* ----------------------------- private code ------------------------------ */
/* ------------------------------------------------------------------------- */

namespace private {

% [mixin-for T M MI] synthesizes an instance of mixin M on type T using
% the databases [mixin-src] and [from]
pred mixin-for i:term, i:mixinname, o:term.
mixin-for T M MICompressed :- mixin-src T M Tm, !, std.do! [
  %if-verbose (coq.say "HB: Trying to infer mixin for" M),
  std.assert-ok! (coq.typecheck Tm Ty) "mixin-for: Tm illtyped",

  factory? Ty (triple Factory Params _),

  if (M = Factory) (MI = Tm) (
      private.builder->term Params T Factory M B,
      coq.subst-fun [Tm] B MI
  ),

  %if-verbose (coq.say "HB: Trying to compress mixin for" {coq.term->string MI}),
  compress-coercion-paths MI MICompressed,
].

pred compress-coercion-paths i:term, o:term.
compress-coercion-paths MI MICompressed :-
  if (get-option "compress_coercions" tt)
     (compress MI MICompressed)
     (MI = MICompressed).

pred mixin-for_mixin-builder i:prop, o:term.
mixin-for_mixin-builder (mixin-for _ _ B) B.

% [builder->term Params TheType Src Tgt MF] finds a builder from Src to Tgt
% and fills in all the mixins required by the builder using mixin-src, obtaining
% a function (MF = Builder Params TheType InferredStuff : Src -> Tgt)
pred builder->term i:list term, i:term, i:factoryname, i:mixinname, o:term.
builder->term Ps T Src Tgt B :- !, std.do! [
  from Src Tgt FGR,
  F = global FGR,
  gref-deps Src MLwP,
  list-w-params_list MLwP ML,
  infer-mixin-args Ps T ML F B,
].

% [instantiate-mixin T F M_i TFX] where mixin-for T M_i X_i states that
% if    F  ~  fun xs (m_0 : M_0 T) .. (m_n : M_n T ..) ys
%            => F xs m_0 .. m_{i-1} m_i m_{i+1} .. m_n ys
% then TFX := fun xs m_0 .. m_{i-1}     m_{i+1} .. m_n ys
%            => F xs m_0 .. m_{i-1} X_i m_{i+1} .. m_n ys
% thus instanciating an abstraction on mixin M_i with X_i
pred instantiate-mixin i:term, i:mixinname, i:term, o:term.
instantiate-mixin T M (fun _ Tm F) R :-
  coq.safe-dest-app Tm (global TmGR) _,
  factory-alias->gref TmGR M, !,
  mixin-for T M X, !,
  R = F X.
instantiate-mixin T M (fun N Ty F) (fun N Ty FX) :- !,
  @pi-decl N Ty m\ instantiate-mixin T M (F m) (FX m).
instantiate-mixin _ _ F F.

% [structure-instance->mixin-srcs TheType Structure] finds a CS instance for
% Structure on TheType (if any) and builds mixin-src clauses for all the mixins
% which can be options from that class instance
pred structure-instance->mixin-srcs i:term, i:structure, o:list prop.
structure-instance->mixin-srcs T S MSLC :- std.do! [
  get-structure-sort-projection S Sort,
  structure-nparams S NParams,
  coq.mk-n-holes NParams Holes,
  coq.mk-app Sort {std.append Holes [ST]} SortHolesST,
  if (coq.unify-eq T SortHolesST ok) (
    % Hum, this unification problem is not super trivial. TODO replace by something simpler
    get-constructor S KS,
    coq.mk-app (global KS) {std.append Holes [T, C]} KSHolesC,
    std.assert-ok! (coq.unify-eq ST KSHolesC) "HB: structure-instance->mixin-srcs: ST = _ _ C",
    C = app Stuff,
    std.drop {calc (NParams + 2)} Stuff MIL,
    std.map MIL (structure-instance->mixin-srcs.aux T) MSLL,
    std.flatten MSLL MSLC)
    (MSLC = [])
].
structure-instance->mixin-srcs.aux T  F CL :-
  factory-instance->new-mixins [] F ML,
  std.map ML (m\c\ c = mixin-src T m F) CL.

% [factory-instance->new-mixins OldMixins FI MSL] find all the mixins
% which can be generated by the factory instance FI which are not part of
% OldMixins (that is, the contribution of FI to the current context)
pred factory-instance->new-mixins i:list mixinname, i:term, o:list mixinname.
factory-instance->new-mixins OldMixins X NewML :- std.do! [
  std.assert-ok! (coq.typecheck X XTy) "mixin-src: X illtyped",
  if (not (coq.safe-dest-app XTy (global _) _))
     (coq.error "Term:\n" {coq.term->string X}
                "\nhas type:\n" {coq.term->string XTy}
                "\nwhich is not a record")
     true,
  coq.term->gref XTy Src,
  factory-provides Src MLwP,
  list-w-params_list MLwP ML,
  std.filter ML (m\ not(std.mem! OldMixins m)) NewML,
].

}}
