/*        Hierarchy Builder: algebraic hierarchies made easy
    This software is released under the terms of the MIT license              */

namespace instance {

% [declare-existing T F] equips T with all the canonical structures that can be
% built using factory instance F
pred declare-existing i:argument, i:argument.
declare-existing T0 F0 :- std.do! [
  argument->ty T0 T, % TODO: change this when supporting morphism hierarchies
  argument->term F0 F,
  std.assert-ok! (coq.typecheck F FTy)
    "HB: declare-existing illtyped factory instance",
  std.assert! (coq.safe-dest-app FTy (global FactoryAlias) _)
     "The type of the instance is not a factory",
  factory-alias->gref FactoryAlias Factory,
  private.declare-instance Factory T F Clauses _,
  acc-clauses current Clauses
].

% [declare-const N B Ty] adds a Definition N : Ty := B where Ty is a factory
% and equips the type the factory is used on with all the canonical structures
% that can be built using factory instance B
pred declare-const i:id, i:term, i:arity, o:list (pair id constant).
declare-const Name BodySkel TyWPSkel CSL :- std.do! [

  coq.say "DC!!!!!!!!!!!!! NOW RUNNING (entry point) declare-const Name BodySkel TyWPSkel CSL",
  coq.say "DC!!!!!!!!!!!!! Name = " Name,
  coq.say "DC!!!!!!!!!!!!! BodySkel = " BodySkel,
  coq.say "DC!!!!!!!!!!!!! TyWPSkel = " TyWPSkel,

  std.assert-ok! (coq.elaborate-arity-skeleton TyWPSkel _ TyWP) "Definition type illtyped",
  coq.arity->term TyWP Ty,
  std.assert-ok! (coq.elaborate-skeleton BodySkel Ty Body) "Definition illtyped",

  % handle parameters via a section -- begin
  if (TyWP = arity SectionTy) (
     % Do not open a section when it is not necessary (no parameters)
     % A side effect of opening a section is loosing meta data associated
     % with instances, in particular builder tags are lost
     if-verbose (coq.say  "HB: skipping section opening"),
     SectionBody = Body
   ) (
    SectionName is "hb_instance_" ^ {std.any->string {new_int}},
    log.coq.env.begin-section SectionName,
    private.postulate-arity TyWP [] Body SectionBody SectionTy
  ),

  % identify the factory
  std.assert! (coq.safe-dest-app SectionTy (global FactoryAlias) Args) "The type of the instance is not a factory",
  factory-alias->gref FactoryAlias Factory,
  std.assert! (factory-nparams Factory NParams) "Not a factory synthesized by HB",

  % declare the constant for the factory instance
  private.hack-section-discharging SectionBody SectionBodyHack,
  private.optimize-body SectionBodyHack OptimizedBody,
  if (Name = "_") (RealName is "HB_unnamed_factory_" ^ {std.any->string {new_int} }) (RealName = Name),

  % unfold local instances in the type of C
  if (current-mode (builder-from _ _ _ _)) (std.do![
    findall-local-canonical LocalCSL,
    coq.copy-clauses-for-unfold LocalCSL UnfoldClauses,
    UnfoldClauses => copy SectionTy SectionTyUnfolded,
  ]) (SectionTy = SectionTyUnfolded),

  log.coq.env.add-const-noimplicits-failondup RealName OptimizedBody
    SectionTyUnfolded @transparent! C,
  TheFactory = (global (const C)),

  % call HB.instance TheType TheFactory
  std.drop NParams Args [TheType|_],

  private.check-non-forgetful-inheritance TheType Factory,

  private.declare-instance Factory TheType TheFactory Clauses CSL,

% In a WRAPPING-RELEVANT INSTANCE, 
% Factory is the wrapped mixin, TheType is the new subject, 
% TheFactory is the wrapped instance for the new subject (in fact, 
% it is the term for the instance that is being processed). 
% E.g. in connection with our example in monoid_enriched_cat.v:
%
% HB.instance Definition funQ_isMon (A B: Type) : isMon (hom A B) :=
%  funQ_isMonF A B.
%
% Factory = isMon
% TheFactory = funQ_isMon
% TheType = hom A B

  coq.say "DC!!!!!! Aft DI: wrapping instance", 
  coq.say "DC!!!!!! Aft DI: Factory = " Factory,
  coq.say "DC!!!!!! Aft DI: TheType = " TheType,
  coq.say "DC!!!!! Aft DI: TheFactory = " TheFactory,
  coq.say "DC!!!!!! Aft DI: Clauses = " Clauses,
  coq.say "DC!!!!! Aft DI: CSL = " CSL,

  % extracts the head subterm (e.g. hom)
  coq.safe-dest-app TheType TheTypeKey _,

  coq.say "DC!!!!!! Aft DI: TheTypeKey = " TheTypeKey,

  % handle parameters via a section -- end
  if (TyWP = arity _) true (
    if-verbose (coq.say {header} "closing instance section"),
    log.coq.env.end-section-name SectionName
  ),

  % we accumulate clauses now that the section is over
  acc-clauses current Clauses,
  
  % As a general idea, we want to add wrapper instances
  % for the original subjects that are covered by the current instances.
  % Here we are processing a specific instance. We want to check
  % whether it corresponds to a wrapper with respect to the new subject
  % (associated with TheTypeKey and the Factory mixin).
  % To this purpose, 
  % 1) we find all the wrappers that agree with the given parameters, 
  % using the wrapper-mixin predicate.    
  % 2) we then apply derive-wrapper-instances to each wrapper, together 
  % with the current instance, to create the derived wrapper instances.    
  % Notice that derive-wrapper-instances calls declare-const. 
  if (TheTypeKey = global TheTypeKeyGR)
    (std.do! [
     std.findall (wrapper-mixin _ TheTypeKeyGR Factory) Wrappers,
     coq.say "DC!!!!!! WRAPPERS (used in old implementation, need changes):" Wrappers,
     std.forall Wrappers (private.derive-wrapper-instances TheFactory)
     ]
    )
    true,

  coq.say "DC!!!!!!!!!!!!! (final output) CSL = " CSL,
].

% [declare-all T CL MCSTL] given a type T and a list of class definition
% CL in topological order (from least dep to most) looks for classes
% for which all the dependencies (mixins) were postulated so far and skips the
% rest. For each fulfilled class it declares a local constant inhabiting the
% corresponding structure and declares it canonical.
% Each mixin used in order to fulfill a class is returned together with its name.
pred declare-all i:term, i:list class, o:list (pair id constant).
declare-all T [class Class Struct MLwP|Rest] [pr Name CS|L] :-
  if (not(has-CS-instance? T Struct))
     true % we build it
     (if-verbose (coq.say {header} "skipping already existing"
                    {nice-gref->string Struct} "instance on"
                    {coq.term->string T}),
      fail),

  params->holes MLwP Params,
  get-constructor Class KC,

  if (synthesis.infer-all-args-let Params T KC KCApp ok)
     (if-verbose (coq.say {header} "we can build a" {nice-gref->string Struct} "on"
        {coq.term->string T}))
     fail,

  !,

  Name is {cs-pattern->name {term->cs-pattern T}}
    ^ "__canonical__" ^ {gref->modname Struct 2 "_" },

  if-verbose (coq.say {header} "declare canonical structure instance" Name),

  get-constructor Struct KS,
  coq.safe-dest-app T THD _,
  private.optimize-class-body THD {std.length Params} KCApp KCAppNames Clauses,
  coq.mk-app (global KS) {std.append Params [T, KCAppNames]} S,
  if-verbose (coq.say {header} "structure instance for" Name "is" {coq.term->string S}),
  std.assert-ok! (coq.typecheck S STy) "declare-all: S illtyped",

  log.coq.env.add-const-noimplicits Name S STy @transparent! CS, % Bug coq/coq#11155, could be a Let
  with-locality (log.coq.CS.declare-instance CS), % Bug coq/coq#11155, should be local

  acc-clause current (local-canonical CS),

  if-verbose (coq.say {header} "structure instance" Name "declared"),

  Clauses => declare-all T Rest L.
declare-all T [_|Rest] L :- declare-all T Rest L.
declare-all _ [] [].

pred declare-factory-sort-deps i:gref.
declare-factory-sort-deps  GR :- std.do! [
  if-verbose (coq.say {header} "required instances on factory sort for" GR),
  Name is "SortInstances" ^ {std.any->string {new_int}},
  log.coq.env.begin-module Name none,
  log.coq.env.begin-section Name,
  mk-factory-sort-deps GR CSL,
  log.coq.env.end-section-name Name,
  log.coq.env.end-module-name Name _,
  std.forall CSL (x\ sigma CS\ x = pr _ CS, log.coq.CS.declare-instance CS)
].

pred declare-factory-sort-factory i:gref.
declare-factory-sort-factory GR :- std.do! [
  if-verbose (coq.say {header} "required instances on factory sort for" GR),
  Name is "SortInstances" ^ {std.any->string {new_int}},
  log.coq.env.begin-module Name none,
  log.coq.env.begin-section Name,
  mk-factory-sort-factory GR CSL,
  log.coq.env.end-section-name Name,
  log.coq.env.end-module-name Name _,
  std.forall CSL (x\ sigma CS\ x = pr _ CS, log.coq.CS.declare-instance CS)
].

pred mk-factory-sort-deps i:gref, o:list (pair id constant).
mk-factory-sort-deps AliasGR CSL :- std.do! [
  factory-alias->gref AliasGR GR,
  gref-deps GR MLwPRaw,
  context.declare MLwPRaw MLwP SortParams SortKey SortMSL _,
  SortMSL => synthesis.infer-all-gref-deps SortParams SortKey GR FSort,
  log.coq.env.add-section-variable-noimplicits "f" FSort CF,
  GCF = global (const CF),
  factory-sort (coercion GRFSort _ GR _),
  SortMSL => synthesis.infer-all-gref-deps SortParams SortKey GRFSort KSort,
  coq.mk-app KSort [GCF] KFSortEta,
  list-w-params_list MLwP ML,
  std.length ML NMLArgs,
  coq.mk-n-holes NMLArgs SortMLHoles,
  std.append {std.append SortParams [SortKey|SortMLHoles]} [GCF] KFSortArgs,
  coq.mk-app (global GRFSort) KFSortArgs KFSort,
  std.assert-ok! (coq.unify-eq KFSortEta KFSort) "HB: KRSort not an app",
  std.map SortMSL
    (c\ o\ sigma m t\ c = mixin-src _ m t, o = mixin-src KFSort m t)
    KFSortMSL,
  KFSortMSL =>
    synthesis.under-mixin-src-from-factory.do! KFSort GCF
      [declare-all KFSort {findall-classes-for ML} CSL]
].

pred mk-factory-sort-factory i:gref, o:list (pair id constant).
mk-factory-sort-factory AliasGR CSL :- std.do! [
  factory-alias->gref AliasGR GR,
  gref-deps GR MLwPRaw,
  context.declare MLwPRaw MLwP SortParams SortKey SortMSL _,
  SortMSL => synthesis.infer-all-gref-deps SortParams SortKey GR FSort,
  log.coq.env.add-section-variable-noimplicits "f" FSort CF,
  std.length {list-w-params_list MLwP} NMLArgs,
  coq.mk-n-holes NMLArgs SortMLHoles,
  GCF = global (const CF),
  coq.mk-app (global GR) {std.append SortParams [GCF|SortMLHoles]} FGCF,
  declare-const "_" GCF (arity FGCF) CSL
].

/* ------------------------------------------------------------------------- */
/* ----------------------------- private code ------------------------------ */
/* ------------------------------------------------------------------------- */

namespace private {

shorten coq.{ term->gref, subst-fun, safe-dest-app, mk-app, mk-eta, subst-prod }.

pred declare-instance i:factoryname, i:term, i:term,
  o:list prop, o:list (pair id constant).
declare-instance Factory T F Clauses CSL :-

  coq.say "DI??????!!!!!!!!!! NOW RUNNING (1) private.declare-instance Factory T F Clauses CSL",
  coq.say "DI?????? Factory " Factory,
  coq.say "DI?????? T " T,
  coq.say "DI?????? F " F,

  current-mode (builder-from T TheFactory FGR _), !,
  if (get-option "local" tt)
    (coq.error "HB: declare-instance: cannot make builders local.
    If you want temporary instances, make an alias, e.g. with let T' := T") true,
  !,
  declare-canonical-instances-from-factory-and-local-builders Factory
    T F TheFactory FGR Clauses CSL.
declare-instance Factory T F Clauses CSL :-

  coq.say "DI??????!!!!!!!!!! NOW RUNNING (2) private.declare-instance Factory T F Clauses CSL",
  coq.say "DI?????? Factory " Factory,
  coq.say "DI?????? T " T,
  coq.say "DI?????? F " F,

  declare-canonical-instances-from-factory Factory T F CSL,
  if (get-option "export" tt)
     (coq.env.current-library File,
      std.map CSL (x\r\ sigma i c\ x = pr i c, r = instance-to-export File i c) Clauses)
     (Clauses = []).

% [add-mixin T F _ M Cl] adds a constant being the mixin instance for M on type
% T built from factory F
pred add-mixin i:term, i:factoryname, i:bool, i:mixinname,
  o:list prop, o:list (pair id constant).
add-mixin T FGR MakeCanon MissingMixin [MixinSrcCl, BuilderDeclCl] CSL :- std.do! [

  coq.say "AM!!!!!!!!! NOW RUNNING add-mixin", 

  new_int N, % timestamp

  synthesis.assert!-infer-mixin T MissingMixin Bo,
  MixinSrcCl = mixin-src T MixinName (global (const C)),
  BuilderDeclCl = builder-decl (builder N FGR MixinName (const C)),

  std.assert-ok! (coq.typecheck Bo Ty) "declare-instances: mixin illtyped",
  safe-dest-app Ty (global MixinNameAlias) _,
  factory-alias->gref MixinNameAlias MixinName,

  std.assert! (MissingMixin = MixinName) "HB: anomaly: we built the wrong mixin",

  % If the mixin instance is already a constant there is no need to
  % alias it.
  if (Bo = global (const C)) true
    (Name is {gref->modname FGR 2 "_"} ^"__to__" ^ {gref->modname MixinName 2 "_"},
     if-verbose (coq.say {header} "declare mixin instance" Name),
     log.coq.env.add-const-noimplicits Name Bo Ty @transparent! C),
  if (MakeCanon = tt, whd (global (const C)) [] (global (indc _)) _)
     (std.do! [
         if-verbose (coq.say {header} "declare canonical mixin instance" C),
         with-locality (log.coq.CS.declare-instance C),
         CSL = [pr "_" C]
     ]) (CSL = []),
].

pred add-all-mixins i:term, i:factoryname, i:list mixinname, i:bool,
  o:list prop, o:list (pair id constant).
add-all-mixins T FGR ML MakeCanon Clauses CSL :- std.do! [

  coq.say "AAM!!!!!!!!!!!!!!! NOW RUNNING add-all-mixins", 

  coq.say "AAM!!!!!!!!!! Bfr T = " T,
  coq.say "AAM!!!!!!!!!! Bfr Factory (FGR) = " FGR,
  coq.say "AAM!!!!!!!!!! Bfr ML = " ML,
  coq.say "AAM!!!!!!!!!! Bfr MakeCanon" MakeCanon,

  std.map ML (m\ o\ sigma ClL CSL\
    add-mixin T FGR MakeCanon m ClL CSL, o = pr ClL CSL) ClLxCSL_L,
  std.unzip ClLxCSL_L ClLL CSLL,
  std.flatten ClLL Clauses,
  std.flatten CSLL CSL,

  coq.say "AAM!!!!!!!!!! Aft Clauses = " Clauses,
  coq.say "AAM!!!!!!!!!! Aft CSL = " CSL,

].

% [postulate-arity A Acc T TS] postulates section variables
% corresponding to parameters in arity A. TS is T applied
% to all section variables (and hd-beta reduced). Acc should
% be [] at call site.
pred postulate-arity i:arity, i:list term, i:term, o:term, o:term.
postulate-arity (parameter ID _ S A) Acc T T1 Ty :-
  std.assert-ok! (coq.typecheck-ty S _) "arity parameter illtyped",
  if-verbose (coq.say {header} "postulating" ID),
  if (var S) (coq.fresh-type S) true,
  log.coq.env.add-section-variable-noimplicits ID S C,
  Var = global (const C),
  postulate-arity (A Var) [Var|Acc] T T1 Ty.
postulate-arity (arity Ty) ArgsRev X T Ty :-
  hd-beta X {std.rev ArgsRev} X1 Stack1,
  unwind X1 Stack1 T.

% We find the new mixins that F build, we build them and shedule them
% for becoming builders at section closing time. We also declare
% all canonical instances these new mixins allow for, so that the user
% can access their theory and notations
pred declare-canonical-instances-from-factory-and-local-builders
   i:factoryname, i:term, i:term, i:term, i:factoryname,
   o:list prop, o:list (pair id constant).
declare-canonical-instances-from-factory-and-local-builders
    Factory T F _TheFactory FGR Clauses CSL :- std.do! [
  synthesis.under-new-mixin-src-from-factory.do! T F (NewMixins\ std.do! [
      add-all-mixins T FGR NewMixins ff Clauses MCSL,
  ]),
  list-w-params_list {factory-provides Factory} ML,
  Clauses => instance.declare-all T {findall-classes-for ML} CCSL,
  std.append MCSL CCSL CSL
].

% [declare-canonical-instances-from-factory T F] given a factory F
% it uses all known builders to declare canonical instances of structures
% on T
pred declare-canonical-instances-from-factory
  i:factoryname, i:term, i:term, o:list (pair id constant).
declare-canonical-instances-from-factory Factory T F CSL :- std.do! [

  coq.say "DCIFF!!!!!!!!!!! NOW RUNNING declare-canonical-instances-from-factory",

  % The order of the following two "under...do!"  is crucial,
  % priority must be given to canonical mixins
  % as they are the ones which guarantee forgetful inheritance
  % hence we add these clauses last.
  synthesis.under-mixin-src-from-factory.do! T F [
    synthesis.under-local-canonical-mixins-of.do! T [
      list-w-params_list {factory-provides Factory} ML,

  coq.say "DCIFF!!!!!!! Factory = " Factory,
  coq.say "DCIFF!!!!!!! T = " T,
  coq.say "DCIFF!!!!!!! F = " F,
  coq.say "DCIFF!!!!!!! ML (mixin names) = " ML,
  coq.say "DFIFF!!!!!!! run add-all-mixins T Factory ML tt _ MCSL",

%%
      % coq.say "#!!!!!!!!!! Bfr F = " F,
    
      % Old code: 
      % notice the underscore in add-all-mixins, output clauses are not used
      % pred add-all-mixins i:term, i:factoryname, i:list mixinname, i:bool,
      %     o:list prop, o:list (pair id constant).
      add-all-mixins T Factory ML tt CSL00 MCSL,
      instance.declare-all T {findall-classes-for ML} CCSL, 
      
      coq.say "DCIFF!!!!!!!!!! Aft MCSL (instance names) = " MCSL, 
      coq.say "DCIFF!!!!!!!!!! Aft CCSL = " CCSL,
      coq.say "DCIFF!!!!!!!!!! Aft (NOT USED!) CSL00 = " CSL00,
    
      ] ],

/*
      % New code: 
      % this should output all the candidate subjects too, as a new output argument.
      add-all-mixins T Factory ML tt Clauses MCSL, 
    ]
  ],
  AllSubjects = [T], % change this using the additional output in add-all-mixins
  % declare-all now is mapped on all the subjects, while Clauses is added to the context.
  Clauses => std.forall AllSubjects
    (s\ instance.declare-all s {findall-classes-for ML} CCSL),

%%
*/

  std.append MCSL CCSL CSL,
  coq.say "DCIFF!!!!!!!!!! Aft CSL = " CSL, 

].

% If you don't mention the factory in a builder, then Coq won't make
% a lambda for it at section closing time.
pred hack-section-discharging i:term, o:term.
hack-section-discharging B B :- current-mode no-builder, !.
hack-section-discharging B B1 :- current-mode (builder-from _ TheFactory _ _), !,
  std.assert-ok! (coq.typecheck TheFactory TheFactoryTy) "TheFactory is illtyped (BUG)",
  B1 = {{ let _ : lp:TheFactoryTy := lp:TheFactory in lp:B }}.
hack-section-discharging B B.

% unfolds the constant used for the phant abbreviation to avoid storing all
% the phantom abstrctions and idfun that were used to trigger inference
pred optimize-body i:term, o:term.
optimize-body (app[global (const C)| Args]) Red :- (phant-abbrev _ (const C) _ ; (rex_match "phant_" {coq.gref->id (const C)})), !,
  coq.env.const C (some B) _,
  hd-beta B Args HD Stack,
  unwind HD Stack Red.
optimize-body (let _ _ T x\x) Red :- !, optimize-body T Red.
optimize-body X X.

pred hnf i:term, o:term.
hnf X R :- get-option "hnf" tt, !, unwind {whd X []} R.
hnf X X.

pred optimize-class-body i:term, i:int, i:term, o:term, o:list prop.
optimize-class-body T NParams (let _ _ MBo R) R1 Clauses :- std.do! [
  declare-mixin-name {hnf MBo} MC CL1,
  if (T = global (indt _), MC = global (const C), not(coq.env.opaque? C))
     (log.coq.strategy.set [C] (level 1000)) true, % opaque stops simpl
  optimize-class-body T NParams (R MC) R1 CL2,
  std.append CL1 CL2 Clauses,
].
optimize-class-body _ _ (app L) (app L) [].

pred declare-mixin-name i:term, o:term, o:list prop.
declare-mixin-name (global _ as T) T [].
declare-mixin-name T (global GR) [] :- mixin-mem T GR.
declare-mixin-name T T [] :- coq.safe-dest-app T (global GR) _, not (from _ _ GR), not (get-option "hnf" tt).
declare-mixin-name T (global (const C)) [mixin-mem T (const C)] :- std.do! [
  Name is "HB_unnamed_mixin_" ^ {std.any->string {new_int}},
  if-verbose (coq.say {header} "Giving name" Name "to mixin instance" {coq.term->string T}),
  log.coq.env.add-const-noimplicits Name T _ @transparent! C,
].

pred check-non-forgetful-inheritance i:term, i:gref.
check-non-forgetful-inheritance _ _ :-
  get-option "non_forgetful_inheritance" tt, !.
check-non-forgetful-inheritance T Factory :- std.do! [
  if (coq.safe-dest-app T (global (const HdSym)) _, structure-key HdSym _ Super) (
    coq.warning "HB" "HB.non-forgetful-inheritance"
      "non forgetful inheritance detected.\n"
      "You have two solutions:"
      "1. (Best practice) Reorganize your hierarchy to make"
      {nice-gref->string Factory}
      "depend on"
      { calc ({nice-gref->string Super} ^ ".") }
      "See the paper \"Competing inheritance paths in"
      "dependent type theory\" (https://hal.inria.fr/hal-02463336) for more"
      "explanations"
      "2. Use the attribute #[non_forgetful_inheritance] to disable this check."
      "We strongly advise you encapsulate this instance inside a module,"
      "in order to isolate it from the rest of the code, and to be able"
      "to import it on demand. See the above paper and the file"
      "https://github.com/math-comp/hierarchy-builder/blob/master/tests/non_forgetful_inheritance.v"
      "to witness devastating effects."
    ) true
].

% The type of the wrapper projection is... 
% hom_isMon.hom_isMon_private :
% forall (T : Type)
%  (local_mixin_monoid_enriched_cat_isQuiver : isQuiver.axioms_ T),
% hom_isMon.axioms_ T local_mixin_monoid_enriched_cat_isQuiver ->
% forall
%  A
%   B : {|
%         Quiver.sort := T;
%         Quiver.class :=
%           {|
%             Quiver.monoid_enriched_cat_isQuiver_mixin :=
%               local_mixin_monoid_enriched_cat_isQuiver
%           |}
%       |}, isMon.phant_axioms (hom A B)
   
% Not used, but possible useful
pred extract_string_name i:mixinname i:term o:string.
extract_string_name W Trm Str.

% Instance has morally type 'Mixin Subject'.
% Has to change, no instance as input but a definition (like BodySkel in declare_instance, 
% still a term, and its type TySkel). 
% Morever, in general this may apply to more than a mixin (if the base mixin is not a trivially 
% atomic one).
% Important to ensure there is a consistent naming scheme.
pred derive-wrapper-instances i:term, i:prop.
derive-wrapper-instances Instance (wrapper-mixin WrapperMixin Subject Mixin) :- std.do! [

    coq.say "OLD!!!!!!!!! NOW RUNNING derive-wrapper-instances Instance _", 
    coq.say "OLD!!!!!!! Instance " Instance, 

    % K is the mixin constructor (Build) for WrapperMixin 
     factory-constructor WrapperMixin K,
     factory-nparams WrapperMixin NParams,
     std.assert! (NParams = 0) "TODO support parameters",
   
    % We are only interested in the last parameter of the constructor
    % type, which is the current instance 
    % (which is a Mixin instance on the new Subject).  
    % In monoid_enriched_cat.v, we are targeting the code 
    %
    % HB.instance Definition funQ_hom_isMon :=
    %             hom_isMon.Axioms_ _ _ funQ_isMon.
    % which Coq can compute to stand for 
    %              hom_isMon.Axioms_ Type funQ funQ_isMon.
    %
    % We compute the number of the underscores and we pass 
    % them as arguments followed by Instance.
     coq.env.typeof K KTy, 
     coq.count-prods KTy KN, 
     KN0 = KN - 1,
     coq.mk-n-holes KN0 Holes,

     std.append Holes [Instance] Args,

     % the body of the new wrapper instance
     NewInstance = app[global K| Args],

     coq.say "OLD!!!!!!!! NewInstance=" {coq.term->string NewInstance},

     coq.typecheck NewInstance Ty Dgn,
     if (Dgn = error S) (coq.say "error in NewInstance" S)
      (coq.count-prods Ty N0,
        % we then call declare-const to add the new instance.
        % the name needs to be fixed.
       instance.declare-const "_" NewInstance {coq.term->arity Ty N0} _
      )

/*
% 2) The existing instances of W correspond to the functions of type (Ty _)
% that are already defined for different original subjects; 
% or in other words, they correspond to wrapped instances, 
% given a specific original subject T and two generic objects of that type. 
% Should we consider only one function for each T?
% This means that e.g. there is only one way a homset can be instance of the wrapped 
% (here, a monoid).
% Notice that it's good to assume all relevant functions have been 
% defined using generic type syntax (otherwise recovering them would be much harder).
% This means for a carrier there is only a quiver. 
% The instances whould be filtered out from the current context, maybe EX?
     filter_out_unique_defs_of_type Ty WrapperProjections,
%     filter_out_unique_defs_of_type Ty AllInstances WrapperProjections,
% 3) We can define the wrapper instances based on Ty, using the projection definitions.
     std.forall WrapperProjections (export-wrapper-instance W)
*/
].
derive-wrapper-instances _ _.

/*
GENERAL COMMENT 05/07/2023.
We have already implemented the elimination rule for wrapper
instances (adding the projection means that given a wrapper instance 
we can get a base mixin one).
We are now implementing the introduction rule for wrapper mixins, 
that is, given a function definition (prospected instance) that has 
the type of the wrapper projection specialized to the base mixin 
(base = wrapped), we can derive a wrapper instance.  
The current proposed solution assumes that the prospected instance 
has already been lifted to a base mixin instance, and additionally
introduces the wrapper instance.  
This is undesirable, as in fact, given the wrapper projection, the
base mixin instance can be derived from the wrapper instance.
So we actually want to use the prospected instance to introduce 
the wrapper instance directly. 
Moreoever, our solution only works when the base mixin is atomic (note this 
is why we need to get down to add-all-mixins). 
Finally, the current solution involves iterating over all the wrappers, 
given an instance, in order to check whether it is a base mixin instance
for some wrapper. 
So it is not good to call 'derive-wrapper-instances' in 'declare-const'.

Top-level (called in structures.v): 'instance.declare-const', 'structure.declare'.

Our real entry point should be 'instance.private.declare-instance' (after line 243) 
Notice that 'declare-instance' is only called in 'instance.declare-const'
(ignore 'instance.declare-existing', deprecated).

'instance.declare-const' is called in 'instance.mk-factory-sort-factory'
(called in instance.declare-factory-sort-deps and 
           instance.declare-factory-sort-factory),
in 'instance.private.derive-wrapper-instance' (our predicate, 
    called in instance.declare-const), 
in 'structure.declare',
in 'structure.private.reexport-wrapper-as-instance' (our predicate, 
    called in structure.declare).

There are two clauses for this predicate (some refactoring needed?) 
We will focus on the latter (after line 253), which calls
'declare-canonical-instances-from-factory' (defined after line 337). 

At line 3**, Factory is the mixin (base mixin), 
             T is actually the subject (a type, e.g. the new subject (@hom T0 A B)), 
             F is the prospective instance (e.g. funQ, funQ_isMon),
             ML are the mixins (the axioms that are needed for the subject...) ???, 
             CSL are the clauses so far. 
Notably: 
 Line 3**, 'synthesis.under-mixin-src-from-factory.do!'.
 Line 3**, 'add-all-mixins'.
 Line 3**, 'declare-all'.

In the implemention of 'under-mixin-src-from-factory.do!' 
(line 99, synthesis.elpi), 
- the first two arguments of 'mixin-src', i.e 'TheType' and 'm',
    should be related by 'wrapper-mixin' 
    (with 'hom' extracted from 'TheType' ??)
    (with 'm' as base mixin ??) 
- 'std.map' ranges over 'ML' (the mixins) and produces clauses 
   collected in MLClauses   
- the third argument is the continuation (executed after locally 
  adding MLClauses to the context). 
  Here 'add-all-mixins' is called (line 347, instance.elpi).  

'add-all-mixins' (defined after line 291) calls 
'add-mixin' (defined after line 262). 
In 'add-mixin' we should check when 'MissingMixin' is a wrapped one.  
Change then will affect 'C'. 
Also check 'assert!-infer-mixin' (synthesis.elpi, line 81) which 
calls 'mixin-for' (synthesis.elpi, line 176).
'mixin-for' actually produces a mixin instance for a mixin and a type,
given a database. 

Main targets for change:
- add-all-mixins: see the proposed change 
- ? 'add-mixin': check 'MissingMixin', change 'C'. 
- ? discussion about overloading of 'mixin-src': used in different predicates, 
  not really understood (??)
- ? possible refactoring of 'declare-instance'
- ? 'under-mixin-src-from-factory.do!' : actually no need to change the subject

*/

}}
